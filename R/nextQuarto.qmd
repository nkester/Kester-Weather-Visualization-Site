---
title: "Kester Weather Station"
author: "Grant and Neil Kester"
date: "3 November 2023"
execute: 
  echo: false
format: 
  html:
    embed-resources: true
---

version: 0.2

This is our first attempt to chart the Weather Station Data.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
library(magrittr)
```

```{r functions}

# This function builds the PostgreSQL query required to aggregate the timeseries
#  data to a specified level.
agg_query <- function(agg_function, type, agg_level){
  
  sprintf("SELECT date, type, %s(\"measurementValue\") AS measure,min(\"measurementValue\") AS measure_min,max(\"measurementValue\") AS measure_max 
                 FROM (
                   SELECT date_trunc('%s',time) AS date,type,\"measurementValue\" 
                   FROM sensor_data
                   WHERE type = '%s') AS A 
                 GROUP BY date,type",agg_function,agg_level,type)
  
}

measure_gather <- function(con, measure_spec, measure_tib, agg_levels){
  
  for(measure in 1:nrow(measure_spec)){
    
    for(agg in agg_levels){
      
      print(sprintf("Measure: %s, Function: %s, and aggregation: %s",
                    measure_spec[measure,2],
                    measure_spec[measure,1],
                    agg))
      
      
      temp <- DBI::dbGetQuery(conn = con,
                              statement = agg_query(agg_function = measure_spec[measure,1],type = measure_spec[measure,2],agg_level = agg))
      
      measure_tib <- dplyr::bind_rows(measure_tib,
                                      tibble::tibble(aggregate_level = agg,
                                                     temp))

      
    }
    
  }
  
  return(measure_tib)
  
  
}

```

## Get Data

Connect to the database

```{r cars}
load(file = "./connectionInfo.RData")

measure_spec <- tibble::tibble(fun = c('avg',
                       'avg',
                       'avg',
                       'avg',
                       'sum',
                       'avg',
                       'avg',
                       'avg'),
               type = c('Air Humidity',
                        'Air Temperature',
                        'Barometric Pressure',
                        'Light Intensity',
                        'Rain Gauge',
                        'UV Index',
                        'Wind Direction Sensor',
                        'Wind Speed'))

agg_levels <- c('month','day','hour')

measure_tib <- tibble::tibble(aggregate_level = "NA",
                              date = Sys.time(),
                              type = "NA",
                              measure = 1.1,
                              measure_min = 1.1,
                              measure_max = 1.1)[-1,]

con <- DBI::dbConnect(drv = RPostgreSQL::PostgreSQL(),
                      dbname = db,
                      host = host,
                      port = port,
                      user = user,
                      password = password)

#measure_AirHumidity_month

measure_tib <- measure_gather(con = con,measure_spec = measure_spec,measure_tib = measure_tib,agg_levels = agg_levels)

# measure_temp<- DBI::dbGetQuery(conn = con,
#                 statement = agg_query(agg_function = 'avg',type = 'Air Humidity',agg_level = 'day'))

# measures_raw <- DBI::dbGetQuery(conn = con,
#                                 statement = "SELECT * FROM sensor_data WHERE type IS NOT NULL")
# 
# measures_month <- DBI::dbGetQuery(conn = con,
#                                   statement = agg_query(agg_level = 'month'))
# 
# measures_day <- DBI::dbGetQuery(conn = con,
#                                 statement = agg_query(agg_level = 'day'))
# 
# measures_min <- DBI::dbGetQuery(conn = con,
#                                 statement = agg_query(agg_level = 'min'))

DBI::dbDisconnect(conn = con)

rm(con,db,host,password,port,user)

ojs_define(data = measure_tib)

# ojs_define(measures_raw = measures_raw,
#            measures_month = measures_month,
#            measures_day = measures_day,
#            measures_min = measures_min)
```

# OJS Table

```{ojs}
Inputs.table(transpose(data), 
{ sort: "date", reverse: true })
```






